<?xml version="1.0"?>
<!--
Copyright (C) 2010-2011 Tom Schoonjans, Philip Brondeel and Laszlo Vincze

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses/.
-->

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
xmlns="http://www.w3.org/1999/xhtml">

<!-- <xsl:output method="html" omit-xml-declaration="yes" /> -->

<xsl:param name="type1"></xsl:param>
<xsl:variable name="type2"><xsl:value-of select="$type1"/></xsl:variable>

<xsl:variable name="x_base"><xsl:value-of select="100"/></xsl:variable>
<xsl:variable name="y_base"><xsl:value-of select="45"/></xsl:variable>

<xsl:param name="select_forloop">
<xsl:choose>
 <xsl:when test="1">xmimsim-results/variance_reduction_history/fluorescence_line_counts</xsl:when>
 <xsl:when test="0">xmimsim-results/variance_reduction_history/fluorescence_line_counts</xsl:when>
 <xsl:otherwise>xmimsim-results/variance_reduction_history/fluorescence_line_counts</xsl:otherwise>
</xsl:choose>
</xsl:param>    

<xsl:variable name="max_width"><xsl:value-of select="/xmimsim-results/svg_graphs/graphic[id/name=$type2]/rect/size/width"/></xsl:variable>
<xsl:variable name="min_energy"><xsl:value-of select="/xmimsim-results/svg_graphs/graphic[id/name=$type2]/rect/size/min_energy"/></xsl:variable>
<xsl:variable name="max_energy"><xsl:value-of select="/xmimsim-results/svg_graphs/graphic[id/name=$type2]/rect/size/max_energy"/></xsl:variable>


<xsl:template name="main" match="/">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <style type="text/css">    

    #grafiek_default
    {
    position: absolute;
		 left: 575px;
		 top: 10px;
    }


 <!--   button {
    border-top-right-radius:2em;
    border-top-left-radius:2em;
    border-bottom-left-radius:2em;
    border-bottom-right-radius:2em;
    } -->

    table {
	    margin: 0px;
     	    padding: 0px;
	    border: none;
<!--	    font-family: Arial;
	    font-size: 0.8em; -->
	   }

<!--   #table0 tr {
           font: Bold;
           font-size: large;
           font-family: Arial;
           font-size:12px;
           width:480px;
           text-align:left;
           border-collapse: collapse;
           margin:20px;
           } -->


    #table0 th {
	   font: Bold;
	   text-align: left;
           font-size:13px;
           font-family: Arial;
           font-weight:normal;
           background:#A6B5E5;
           border-top:4px solid #aabcfe;
           border-bottom:1px solid #fff;
           color:#039;
           padding:8px;
	   }

    #table1 th {
    	   text-align: left;
    	   height: 0px;
<!--           font-size:13px;
           font-weight:normal;-->
           background: #fff;
           padding:0px;
	   }


    #table1 tr {
           font: Bold;
    	   text-align: left;
           font-size:13px;
           font-family: Arial;
           font-weight:normal;
           background: #e4ecf7;
           border-top:4px solid #aabcfe;
           border-bottom:1px solid #fff;
           color:#039;
           padding:8px;
	   }

    #table1 tr:hover {
            background: white;
            }

 <!--   #table1 td {
     padding:0px;         
     border-bottom:0px solid white;         
     height:10px;  
	   } -->


 <!--     #table1 td:hover {
	    background:white;         
	   } -->

	   
</style>

<title>xmimsim table</title>

<script type="text/javascript">
<xsl:text disable-output-escaping="yes">

<![CDATA[ 

var treetable_rowstate = new Array();
var treetable_callbacks = new Array();
var transaction_count = 0;
var cnst_x_base = 0;
var cnst_size = 0;
var cnst_min_energy = 0;
var cnst_max_energy = 0;

function increment_transaction_count()
{

 transaction_count++;

 return(transaction_count);
}

function set_selection_transactions()
{
}

function treetable_rebuild(id, x_base, size,  min_energy, max_energy )
{
var current_element;
var current_line;
var id1;
var count_element;
var count_line;
var count_interaction;
var current_count;
var count_element_id;
var count_line_id;
var temp = new Array();

 table = document.getElementById(id);

 rowChildren = table.getElementsByTagName('tr');

 count_element = 0;
 count_line = 0;
 count_interaction = 0;
 sum_element = 0;
 sum_line = 0;

 for (i = 1; i < rowChildren.length; i++) {
     id1 = rowChildren[i].id;

     if(id1 =="element"){
       current_element = count_element;
       count_element++;
       current_element_id = "table1_" + current_element;
       rowChildren[i].id = current_element_id;
       count_line = 0;
       count_interaction = 0;
       count_element_id = "count_" + document.getElementById(current_element_id).getAttribute("pos");
       current_count = 0;
       document.getElementById(count_element_id).innerHTML = "0";
       }

     if(id1 =="line"){
      current_line = count_line;
      count_line++;
      current_line_id = "table1_" + current_element + "_" + current_line;
      rowChildren[i].id = current_line_id;
      count_interaction = 0;
      count_line_id = "count_" + document.getElementById(current_line_id).getAttribute("pos");
      current_count = 0;
      document.getElementById(count_line_id).innerHTML = "0";
      draw_line_id = document.getElementById(current_line_id).getAttribute("draw");
      energy = document.getElementById(current_line_id).getAttribute("energy");
      draw_line(draw_line_id, "hidden", energy, x_base, size,  min_energy, max_energy);
      }

     if(id1 =="interaction"){
      current_interaction = count_interaction;
      count_interaction++;
      rowChildren[i].id = "table1_" + current_element + "_" + current_line + "_" + current_interaction;
      current_count = document.getElementById(rowChildren[i].id).getAttribute("count");
      add_number(count_element_id, current_count);
      add_number(count_line_id, current_count);  
      treetable_hideRow(rowChildren[i].id); 
      }

   }

// set scientific
  table = document.getElementById(id);
  rowChildren = table.getElementsByTagName('td');

  for (i = 1; i < rowChildren.length; i++) {
   temp = rowChildren[i].id.split('_');

   if(temp[0] == "count"){
     makeScientific(rowChildren[i].id);
   }
 }

 display_graphics_all("hidden");
 display_graphics("1");
}

function makeScientific(id){
if (typeof id != 'undefined'){
  result = document.getElementById(id).innerHTML;
  document.getElementById(id).innerHTML = Math2Scientific(result, '8');
}
}

function add_number(id, input){

 var float_value = new Number(0);
 var float_input = new Number(0);
 var float_result = new Number(0);


 float_input = parseFloat(input);

 if (typeof id != 'undefined'){
   result = document.getElementById(id).innerHTML;
   float_value = parseFloat(result);
   float_result += float_value;
   float_result += float_input;

      document.getElementById(id).innerHTML = float_result;
   }
}


function treetable_hideRow(rowId) {
 el = document.getElementById(rowId);
 el.style.display = "none";
}

function treetable_showRow(rowId) {
 el = document.getElementById(rowId);
 el.style.display = "";
}

function treetable_hasChildren(rowId) {
 res = document.getElementById(rowId + '_0');
 return (res != null);
}

function treetable_getRowChildren(rowId) {
 el = document.getElementById(rowId);
 var arr = new Array();
 i = 0;
 while (true) {
   childRowId = rowId + '_' + i;
   childEl = document.getElementById(childRowId);
   if (childEl != null) {
     arr[i] = childRowId;
   } else {
     break;
   }
   i++;
 }
 return (arr);
}

function get_number_of_children(rowId)
{
 var i;

 i = 0;
 while (true) {
   childRowId = rowId + '_' + i;
   childEl = document.getElementById(childRowId);
   if (childEl == null) {
    break;
   }
  i++;
 }
 return (i);


}

function treetable_toggle(tableid, id) {
 var current_element;
 var current_line;
 var found;

 found = 0;

 table = document.getElementById(tableid);
 rowChildren = table.getElementsByTagName('tr');

 for (i = 1; i < rowChildren.length; i++) {
   current_element = rowChildren[i].id;
   current_pos = document.getElementById(current_element).getAttribute("pos");

   if(current_pos == id){
   break;}
 }

 treetable_toggleRow(current_element); 

 return (true);
}

function treetable_hideChildren(rowId) {

 var count;
 var z;

 count = get_number_of_children(rowId);

 for( z=0; z<count; z++) {
     childRowId = rowId + '_' + z;
    childEl = document.getElementById(childRowId);
   if (childEl == null) {
    break;
    }
    else
   {
    treetable_hideRow(childRowId);
   }
 }

  xx = document.getElementById(rowId);
  toggle_id_x = xx.getAttribute("pos");
  yx = document.getElementById(toggle_id_x);
  yx.innerHTML = "<svg  width='14px' height='8px'><polygon points='0,0 0,8 10,4' stroke='#039' stroke-width='1' fill='none'/>";

 return (null);
}


function treetable_toggleRow(rowId) {

// if you have no children do nothing
 rowChildren = treetable_getRowChildren(rowId);

 if(rowChildren.length > 0) {

 x = document.getElementById(rowId);
 
 toggle_id = x.getAttribute("pos");
 y = document.getElementById(toggle_id);

 row_state = y.getAttribute("status");
 
 for (i = 0; i < rowChildren.length; i++) {
   if (row_state == "expand") {
     treetable_hideRow(rowChildren[i]);   
     if(document.getElementById(rowChildren[i]).getAttribute("pos") != "no_children")
       {
        childid = rowChildren[i];
       treetable_hideChildren(childid);
       }
     } else {
     treetable_showRow(rowChildren[i]);  
    }
  }

// show_debug(y.getAttribute("status"));

 if (row_state == "expand") {  
   y.setAttribute("status","collaps");
   y.innerHTML="<svg  width='14px' height='8px'><polygon points='0,0 0,8 10,4' stroke='#039' stroke-width='1' fill='none'/>";
     } else {
   y.setAttribute("status","expand");
   y.innerHTML="<svg  width='14px' height='8px'><polygon points='0,0 6,8 13,0' stroke='#039' stroke-width='1' fill='none'/>";
  }
 }
 
return (true);
}


function treetable_collapseAll(tableId) {
 treetable_expandAll(tableId);
 table = document.getElementById(tableId);
 rowChildren = table.getElementsByTagName('tr');
 for (i = 0; i < rowChildren.length; i++) {
   if (index = rowChildren[i].id.indexOf('_')) {
     // do not hide root elements
     if(index != rowChildren[i].id.lastIndexOf('_')) {
       rowChildren[i].style.display = 'none';
     }
     if (treetable_hasChildren(rowChildren[i].id)) {
       y = document.getElementById(rowChildren[i].id);
       pos_id = y.getAttribute("pos");
       z = document.getElementById(pos_id);
       z.setAttribute("status","collaps");
       z.innerHTML = "<svg  width='14px' height='8px'><polygon points='0,0 0,8 10,4' stroke='#039' stroke-width='1' fill='none'/>";
      // treetable_rowstate[rowChildren[i].id] = -1;
     }
   }
 }
 return (true);
}   


function treetable_expandAll(tableId) {
 table = document.getElementById(tableId);
 rowChildren = table.getElementsByTagName('tr');
 for (i = 0; i < rowChildren.length; i++) {
   if (index = rowChildren[i].id.indexOf('_')) {
     rowChildren[i].style.display = '';
     if (treetable_hasChildren(rowChildren[i].id)) {
       y = document.getElementById(rowChildren[i].id);
       pos_id = y.getAttribute("pos");
       z = document.getElementById(pos_id);
       z.setAttribute("status","expand");
       z.innerHTML = "<svg  width='14px' height='8px'><polygon points='0,0 6,8 13,0' stroke='#039' stroke-width='1' fill='none'/>";
     //  treetable_rowstate[rowChildren[i].id] = 1;
     }
   }
 }
 return (true);
}


function draw_line(id, state, energy_pre, x_base, size,  min_energy, max_energy )
{
   var x=document.getElementById(id); 
   var fl_size = new Number(0);
   var fl_energy_pre = new Number(0);
   var fl_min_energy = new Number(0);
   var fl_max_energy = new Number(0);
   var fl_x_base = new Number(0);
   var energy = new Number(0);
 
   // "" = display
   // "hidden" = hidden

 fl_size = parseFloat(size);
 fl_energy_pre = parseFloat(energy_pre);
 fl_min_energy = parseFloat(min_energy);
 fl_max_energy = parseFloat(max_energy);
 fl_x_base = parseFloat(x_base);

 energy = fl_x_base + (fl_size * (fl_energy_pre - fl_min_energy)/(fl_max_energy - fl_min_energy));
 grafiek_lijn_id = "grafiek_lijn"+"element"+"line";

 line = '<svg id="grafiek_lijn_id" style="position: absolute;left: 600px; top: 10px;" width="100%" height="400" version="1.1" xmlns="http://www.w3.org/2000/svg">';
 line += '<path d="M ' + energy + ' 45 L ' + energy + ' 305 " stroke="blue" stroke-width="1" fill="none"/>';
 line += '</svg>';
 x.innerHTML = line;

 x.style.visibility = state;

}

function display_line(element, line, state)
{
  id2 = element.toString();
  id3 = line.toString();

  id = "linedraw_"+ id2 + id3;

  var x=document.getElementById(id); 

  if(x != null){
   x.style.visibility = state;
  }
}


function display_graphics_all(state){

   // "" = display
   // "hidden" = hidden

   i=0;
   id  = "grafiek"+i;
   while(document.getElementById(id) != null) {
    document.getElementById(id).style.visibility = state;
    i = i + 1;
    id = "grafiek"+i;
   }
}

function display_graphics(interaction)
{ 
   var interaction_nbr = new Number(0);
   interaction_nbr = parseInt(interaction);

   if(interaction_nbr > 0){
       
    id = "grafiek"+(interaction_nbr-1);
    x = document.getElementById(id);
    if(x != null){
      x.style.visibility = "";
    }
   }
}


function hide_graphics(interaction)
{ 
   var interaction_nbr = new Number(0);
   interaction_nbr = parseInt(interaction);

   if(interaction_nbr > 0){
       
    id = "grafiek"+(interaction_nbr-1);
    x = document.getElementById(id);
    if(x != null){
      x.style.visibility = "hidden";
    }
   }
}


function Math2Scientific(num, sigDigs) {
       //deal with messy input values
       num = Number(num); //try to convert to a number

       if (isNaN(num)) return num; //garbage in, NaN out      

       //find exponent using logarithm
       //e.g. log10(150) = 2.18 -- round down to 2 using floor()
       var exponent = Math.floor(Math.log(Math.abs(num)) / Math.LN10);

       if (num == 0) exponent = 0; //handle glitch if the number is zero

       //find mantissa (e.g. "3.47" is mantissa of 3470; need to divide by 1000)
       var tenToPower = Math.pow(10, exponent);
       var mantissa = num / tenToPower;

       //force significant digits in mantissa
       //e.g. 3 sig digs: 5 -> 5.00, 7.1 -> 7.10, 4.2791 -> 4.28
       mantissa = formatDecimals(mantissa, sigDigs-1); //use custom function

       var output = mantissa;
       //if exponent is zero, don't include e
       if (exponent > 0) {
               output += "e+" + exponent;
       }
        if (exponent < 0) {
               output += "e-" + exponent;
       }
       
 return(output);
}

function formatDecimals(num, digits) {
       //if no decimal places needed, we're done
       if (digits <= 0) {
               return Math.round(num); 
       } 
       //round the number to specified decimal places
       //e.g. 12.3456 to 3 digits (12.346) -> mult. by 1000, round, div. by 1000
       var tenToPower = Math.pow(10, digits);
       var cropped = String(Math.round(num * tenToPower) / tenToPower);

       //add decimal point if missing
       if (cropped.indexOf(".") == -1) {
               cropped += ".0";  //e.g. 5 -> 5.0 (at least one zero is needed)
       }

       //finally, force correct number of zeroes; add some if necessary
       var halves = cropped.split("."); //grab numbers to the right of the decimal
       //compare digits in right half of string to digits wanted
       var zerosNeeded = digits - halves[1].length; //number of zeros to add
       for (var i=1; i <= zerosNeeded; i++) {
               cropped += "0";
       }
       return(cropped);
}

function show_debug(string){
 //alert(string);
 document.getElementById("show_debug").innerHTML+=string;
 document.getElementById("show_debug").innerHTML+=" ";
}   

function set_interaction(id, interaction_nbr)
{
  x = document.getElementById(id);
  
  if(x.checked == true){
    display_graphics(interaction_nbr);
  }
  else
  {
    hide_graphics(interaction_nbr);
  };

}

function set_line(linename, elementnbr, linenbr )
{
  id1 = linename;
  id2 = elementnbr.toString();
  id3 = linenbr.toString();
  id = id1 + id2 + id3;
  x = document.getElementById(id);
  
  if(x.checked == true){
    display_line(elementnbr, linenbr, "");
  }
  else
  {
    id = "chkboxelement"+elementnbr.toString();
    y = document.getElementById(id);
    document.getElementById(id).checked=false;
    display_line(elementnbr, linenbr, "hidden");
  };
}

function set_all_line(linename, elementnbr)
{
  var nbr_children;
  id = linename+elementnbr.toString();
  x = document.getElementById(id);

  var checked_state;
  var hidden

  if(x.checked == true){
   checked_state = true;
   state = "";
  }
  else{
   checked_state = false;
   state = "hidden";
  }

  if(elementnbr > 0)
    {
     nbr = elementnbr - 1;
     rowid = "table1_"+ nbr.toString();

    nbr_children = 0;
    while (true) {
    childRowId = rowid + '_' + nbr_children;
    childEl = document.getElementById(childRowId);
    if (childEl == null) {
     break;
      }
     else
      {
     line=nbr_children+1;
     chkboxId = "chkboxline"+elementnbr+line;
     document.getElementById(chkboxId).checked = checked_state;
     display_line(elementnbr, line, state);
      }
     nbr_children++;
    }
   }
}

//window.onload = treetable_rebuild("table1");

]]> 
</xsl:text>
</script>
</head>

<xsl:for-each select="xmimsim-results/svg_graphs">
<xsl:for-each select="graphic[id/name=$type2]">
<xsl:variable name="graph_index"><xsl:value-of select="position() -1 "/></xsl:variable>

<xsl:variable name="height_pre"><xsl:value-of select="rect/size/height"/></xsl:variable>
<xsl:variable name="height"><xsl:value-of select="$height_pre + 10"/></xsl:variable>
<xsl:variable name="width"><xsl:value-of select="rect/size/width"/></xsl:variable>

<xsl:if test="$graph_index = 0 ">
<xsl:variable name="max_width"><xsl:value-of select="$width"/></xsl:variable>
</xsl:if>

<xsl:variable name="max_energy"><xsl:value-of select="rect/size/max_energy"/></xsl:variable>
<xsl:variable name="min_energy"><xsl:value-of select="rect/size/min_energy"/></xsl:variable>

<xsl:variable name="width_extra"><xsl:value-of select="$width + $x_base + 10"/></xsl:variable>
<xsl:variable name="x_text"><xsl:value-of select="$x_base - 10"/></xsl:variable>
<xsl:variable name="x_index"><xsl:value-of select="$x_base - 5"/></xsl:variable>
<xsl:variable name="height_extra"><xsl:value-of select="$height + $y_base"/></xsl:variable>
<xsl:variable name="height_text"><xsl:value-of select="$height + $y_base + 20"/></xsl:variable>
<xsl:variable name="height_index"><xsl:value-of select="$height + $y_base + 5"/></xsl:variable>
<xsl:variable name="height_name"><xsl:value-of select="$height + $y_base + 40"/></xsl:variable>

<xsl:if test="$graph_index = 0">
<svg  id="grafiek" style="position: absolute;left: 600px; top: 10px;" width="100%" height="4000"  version="1.1" xmlns="http://www.w3.org/2000/svg">

<!--rect-->
<rect x="{$x_base}" y="{$y_base}"  height="{$height}" width = "{$width}"  fill="none" stroke="#000" ></rect>

<!--x-axis-->
<text x="{$width_extra}" y="{$height_name}" text-anchor="end" text-align="end" style="font-family: arial; font-size: 13px;"  >
<xsl:value-of select="rect/x-axis/name"/></text>
<xsl:for-each select="rect/x-axis/index">
<xsl:variable name="value"><xsl:value-of select="value"/></xsl:variable>
<xsl:variable name="val"><xsl:value-of select="$value + $x_base"/></xsl:variable>
<text x="{$val}" y="{$height_text}" text-anchor="middle" text-align="middle" style="font-family: arial; font-size: 11px;" ><xsl:value-of select="name"/></text>
<path d="M {$val} {$height_extra} L {$val} {$height_index}" stroke="#000"/>
</xsl:for-each>

<!--y-axis-->
<xsl:variable name="y_index_pos"><xsl:value-of select=" $y_base - 10"/></xsl:variable>
<text x="{$x_text}" y="{$y_index_pos}" text-anchor="middle" text-align="middle" style="font-family: arial; font-size: 13px;"><xsl:value-of select="rect/y-axis/name"/></text>
<xsl:for-each select="rect/y-axis/index">
<xsl:variable name="value"><xsl:value-of select="value"/></xsl:variable>
<xsl:variable name="val"><xsl:value-of select="$height_extra - $value"/></xsl:variable>
<text x="{$x_text}" y="{$val}"  text-anchor="end" text-align="end" style="font-family: arial; font-size: 11px;"><xsl:value-of select="name"/></text>
<path d="M {$x_index}  {$val} L {$x_base} {$val}" stroke="#000"/>
</xsl:for-each>
</svg>
</xsl:if>


<svg  id="grafiek{$graph_index}" style="position: absolute;left: 600px; top: 10px;" width="100%" height="4000"  version="1.1" xmlns="http://www.w3.org/2000/svg">

<xsl:variable name="color2">
<xsl:choose>
 <xsl:when test="$graph_index = 0 ">blue</xsl:when>
 <xsl:when test="$graph_index = 1 ">red</xsl:when>
 <xsl:when test="$graph_index = 2 ">green</xsl:when>
 <xsl:when test="$graph_index = 3 ">orange</xsl:when>
 <xsl:otherwise>purple</xsl:otherwise>
</xsl:choose>
</xsl:variable>

<xsl:variable name="color"><xsl:value-of select="$color2"/></xsl:variable>

<xsl:variable name="title_pos"><xsl:value-of select=" $height_text + 40 + 10 * $graph_index"/></xsl:variable>

<!--<text x="{$x_base}" y="{$title_pos}" font-size="10px" text-anchor="begin" text-align="begin" font-family="H
elvetica Condensed"  stroke="{$color}"> interaction <xsl:value-of select="$type2" />  <xsl:value-of select="$graph_index" />  </text> 
-->

<xsl:for-each select="points/point">
<xsl:variable name="pos"><xsl:value-of select="position()"/></xsl:variable>
<xsl:variable name="x"><xsl:value-of select="x + $x_base"/></xsl:variable>
<xsl:variable name="y"><xsl:value-of select="$height_extra - y"/></xsl:variable>
<xsl:variable name="x_pre"><xsl:value-of select="preceding::x[1] + $x_base"/></xsl:variable>
<xsl:variable name="y_pre"><xsl:value-of select="$height_extra - preceding::y[1]"/></xsl:variable>
<xsl:if test="$pos>'1'">
<path d="M {$x_pre} {$y_pre}  L {$x} {$y} " stroke="{$color}" stroke-width="1" fill="none"/>
</xsl:if>

</xsl:for-each>
</svg>

</xsl:for-each>
</xsl:for-each>


<body onload="treetable_rebuild('table1', {$x_base}, {$max_width}, {$min_energy}, {$max_energy} )">
<table  style="width: 100%; height: 100%; overflow: vertical; border: 1px solid white;">
<COLGROUP><COL width="500px"/><COL width="*"/></COLGROUP>
<td valign="top">       
 <button type="button" style="font-size:13px;font-weight:normal;background:#b9c9fe;border-top:4px solid #aabcfe;border-bottom:1px solid #fff;color:#039;padding:8px;" onclick="treetable_expandAll('table1');">Expand all</button>  
 <button type="button" style="font-size:13px;font-weight:normal;background:#b9c9fe;border-top:4px solid #aabcfe;border-bottom:1px solid #fff;color:#039;padding:8px;" onclick="treetable_collapseAll('table1');">Collapse all</button>

<div style="width:562px;">          
 <table id="table0"  style="width: 100%;  border: 1px solid white;" >
   <colgroup>
     <col width="90" />
     <col width="60" />
     <col width="100"/>
     <col width="70" />
     <col width="100" />
     <col width="*" />
   </colgroup>
   <tr>
     <th align = "left" >Element (nbr)</th>
     <th align = "left" >Line</th>
     <th align = "left" >Energy </th>
     <th align = "left" >Show line</th>
     <th align = "left" ># Interaction</th>
     <th align = "left" >Intensity</th>
   </tr>  
 </table>
</div>


 <div style="overflow:auto; height:600px;width:564px;">          
 <table id="table1"  style="width: 100%;   overflow: auto; border: 1px solid white;" >
   <colgroup>
     <col width="90" />
     <col width="60" />
     <col width="100"/>
     <col width="70" />
     <col width="100" />
     <col width="*" />
     <col width="0" />
   </colgroup>
  <tr>
     <th align = "left" ></th>
     <th align = "left" ></th>
     <th align = "left" ></th>
     <th align = "left" ></th>
     <th align = "left" ></th>
     <th align = "left" ></th> 
   </tr>    

<xsl:for-each select="xmimsim-results/variance_reduction_history/fluorescence_line_counts">

<xsl:variable name="current_atomic_nbr"><xsl:value-of select="@atomic_number"/></xsl:variable>
<xsl:variable name="preceding_atomic_nbr"><xsl:value-of select="preceding::fluorescence_line_counts[1]/@atomic_number"/></xsl:variable>
<xsl:variable name="current_symbol"><xsl:value-of select="@symbol"/></xsl:variable>

<xsl:variable name="current_position"><xsl:value-of select="position()"/></xsl:variable> 

<xsl:if test="$current_atomic_nbr != $preceding_atomic_nbr">

    <xsl:text>&#10;</xsl:text> <tr id="element" pos='element{$current_position}'  >
    <xsl:text>&#10;</xsl:text> <td id='symbol{$current_position}' ><xsl:value-of select="$current_symbol"/> (<xsl:value-of select="$current_atomic_nbr"/>)</td> 
    <xsl:text>&#10;</xsl:text> <td id='element{$current_position}' onclick="treetable_toggle('table1','element{$current_position}');" status="expand"><svg  width="14px" height="8px"><polygon points="0,0 6,8 13,0" stroke="#039" stroke-width="1" fill="none"/></svg></td>
    <xsl:text>&#10;</xsl:text> <td></td>
    <xsl:text>&#10;</xsl:text> <td><input id="chkboxelement{$current_position}" type="checkbox" onclick="set_all_line('chkboxelement',{$current_position})"/></td>
    <xsl:text>&#10;</xsl:text> <td></td> 
    <xsl:text>&#10;</xsl:text> <td id='count_element{$current_position}' style="color:#039" ></td> 
    <xsl:text>&#10;</xsl:text> <td style="background:white" ></td>
     </tr> 
</xsl:if>

<xsl:for-each select="fluorescence_line">

<xsl:variable name="current_line_type"><xsl:value-of select="@type"/></xsl:variable>
<xsl:variable name="preceding_line_type"><xsl:value-of select="preceding::fluorescence_line[1]/@type"/></xsl:variable>
<xsl:variable name="current_energy"><xsl:value-of select="@energy"/></xsl:variable>

<xsl:variable name="current_line_position"><xsl:value-of select="position()"/></xsl:variable> 

<xsl:if test="$current_energy != '0.000000'">

    <xsl:text>&#10;</xsl:text> <tr id="line" pos='line{$current_position}{$current_line_position}' energy='{$current_energy}' draw='linedraw_{$current_position}{$current_line_position}'>
    <xsl:text>&#10;</xsl:text> <td></td>
    <xsl:text>&#10;</xsl:text> <td id="linetype_{$current_position}{$current_line_position}" pos='line_type{$current_symbol}' > 
     <xsl:value-of select="$current_line_type"/></td>
     <xsl:text>&#10;</xsl:text> <td><xsl:value-of select="$current_energy"/></td>
     <xsl:text>&#10;</xsl:text> <td><input id="chkboxline{$current_position}{$current_line_position}" type="checkbox" onclick="set_line('chkboxline',{$current_position},{$current_line_position})"/></td>
    <xsl:text>&#10;</xsl:text> <td id='line{$current_position}{$current_line_position}' onclick="treetable_toggle('table1','line{$current_position}{$current_line_position}');" status="collaps"><svg  width="14px" height="8px"><polygon points="0,0 0,8 10,4" stroke="#039" stroke-width="1" fill="none"/></svg></td>
   <xsl:text>&#10;</xsl:text><td id='count_line{$current_position}{$current_line_position}' style="color:green" ></td>
   <xsl:text>&#10;</xsl:text><td id="linedraw_{$current_position}{$current_line_position}" style="background:white" ></td>
     </tr>

<xsl:for-each select="counts">

<xsl:variable name="current_count"><xsl:value-of select="."/></xsl:variable>


<xsl:variable name="current_interaction"><xsl:value-of select="@interaction_number"/></xsl:variable>
<xsl:variable name="preceding_interaction"><xsl:value-of select="preceding::counts[1]/@interaction_number"/></xsl:variable>

    <xsl:text>&#10;</xsl:text> <tr id="interaction" count='{$current_count}' pos='no_children'>
   <xsl:text>&#10;</xsl:text>  <td></td>
    <xsl:text>&#10;</xsl:text> <td></td>
    <xsl:text>&#10;</xsl:text> <td></td>
    <xsl:text>&#10;</xsl:text> <td></td>
    <xsl:text>&#10;</xsl:text> <td><xsl:value-of select="$current_interaction"/></td>
    <xsl:text>&#10;</xsl:text> <td><xsl:value-of select="$current_count"/> </td>
    <xsl:text>&#10;</xsl:text> <td style="background:white" ></td>
     </tr>

</xsl:for-each>

</xsl:if>

</xsl:for-each>
</xsl:for-each>

  </table>

 </div>
</td>
 
<td id="drawing" valign="top"></td>


<td id="selection" valign="top">
<!--<div style="font: Bold; font-size: large; font-family: Arial;font-size:12px;width:480px;font-weight:normal;background:#fff;border-top:4px solid #fff;border-bottom:1px solid #fff;color:#039;padding:8px;width: 150px;  position: absolute; left: 700px; top: 410px;" > -->
  
<div style=" position: absolute; left: 700px; top: 380px; font-family: Arial; font-size:13px; " >

<p> Select interaction  </p>    
<p>

<xsl:for-each select="xmimsim-results/variance_reduction_history/fluorescence_line_counts/fluorescence_line">

<xsl:variable name="current_line_nbr"><xsl:value-of select="position()"/></xsl:variable> 

<xsl:if test="$current_line_nbr = 1"> 

<xsl:for-each select="counts">

<xsl:variable name="current_count"><xsl:value-of select="position()"/></xsl:variable> 

<xsl:choose>
<xsl:when test="$current_count = 1">
<input id="chkbx_interact_{$current_count}"  type="checkbox" checked="ok" onclick="set_interaction('chkbx_interact_{$current_count}','{$current_count}')"/> Interaction <xsl:value-of select="$current_count"/> <br/>
</xsl:when>
<xsl:otherwise>
<input id="chkbx_interact_{$current_count}"  type="checkbox" onclick="set_interaction('chkbx_interact_{$current_count}','{$current_count}')"/> Interaction <xsl:value-of select="$current_count"/> <br/>
</xsl:otherwise>
</xsl:choose>

  
</xsl:for-each>
</xsl:if> 
</xsl:for-each>
</p>
</div>
</td>

</table>


<div id="show_debug">
</div>

</body>

</html>

</xsl:template>




</xsl:stylesheet>
